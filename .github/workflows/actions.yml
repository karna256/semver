name: Semver Workflow

on:
  pull_request:
    types: [opened, synchronize, closed]
    branches: [main, qa, staging]

permissions:
  deployments: write
  contents: write
  actions: write

jobs:
  Resolve-Environment:
    runs-on: ubuntu-latest
    steps:
      - name: Resolve Environment
        run: |
          branch_ref=${{ github.base_ref }}
            if [ $branch_ref == 'main' ]; then
                echo "env_name=prod" >> $GITHUB_ENV
            elif [ $branch_ref == 'qa' ]; then
                echo "env_name=qa" >> $GITHUB_ENV
            elif [ $branch_ref == 'staging' ]; then
                echo "env_name=staging" >> $GITHUB_ENV
            fi
    outputs:
      env_name: ${{ env.env_name }}
  Semver:
    needs: Resolve-Environment
    environment: ${{ needs.Resolve-Environment.outputs.env_name }}
    runs-on: ubuntu-latest
    env:
      package_name: ${{ needs.Resolve-Environment.outputs.env_name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup semver bash
        if: github.event.pull_request.merged
        run: |
          sudo curl https://raw.githubusercontent.com/fsaintjacques/semver-tool/3.0.0/src/semver -o /usr/local/bin/semver && sudo chmod +x /usr/local/bin/semver
          semver --version
      - name: Get version
        id: get-version
        if: github.event.pull_request.merged
        run: |
          git fetch --tags
          last_version=$(git tag --sort=-version:refname | grep -P "^$package_name@v\d+.\d+.\d+$" | head -n 1 | cut -d v -f 2)
          if [ -z "$last_version" ]; then
            new_version=1.0.0
          elif [[ ${{ github.head_ref }} =~ ^"major" ]]; then
            new_version=$(semver bump major "$last_version")
          elif [[ ${{ github.head_ref }} =~ ^"feat" ]]; then
            new_version=$(semver bump minor "$last_version")
          else
            new_version=$(semver bump patch "$last_version")
          fi
          echo "new_version=$new_version" >> $GITHUB_OUTPUT
      - name: Prepare tag
        id: prepare
        if: github.event.pull_request.merged
        run: |
          VERSION=${SCOPE}@v${RELEASE_VERSION}
          echo "tag_version=$VERSION" >> $GITHUB_ENV
        env:
          SCOPE: ${{ env.package_name }}
          RELEASE_VERSION: ${{ steps.get-version.outputs.new_version }}
      - name: Push Tag
        if: github.event.pull_request.merged
        id: tag_version
        uses: mathieudutour/github-tag-action@v5.6
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          custom_tag: ${{ env.tag_version }}
          tag_prefix: ""
      - name: Create release
        if: github.event.pull_request.merged
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          prerelease: false
          title: ${{ env.tag_version }}
          automatic_release_tag: ${{ env.tag_version }}
